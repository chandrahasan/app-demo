/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/domain/Entity.e.vm.java
 */
package com.app.demo.domain;

import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.EnumType.STRING;
import static javax.persistence.TemporalType.TIMESTAMP;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.Lob;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.persistence.Version;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.ParamDef;
import org.hibernate.search.annotations.Analyzer;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.NotEmpty;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.app.demo.domain.Civility;
import com.app.demo.domain.Person_;
import com.app.demo.domain.Role;
import com.google.common.base.Objects;

@Entity
@Table(name = "person")
@FilterDef(name = "myPersonFilter", defaultCondition = "ID = :currentAccountId ", parameters = @ParamDef(name = "currentAccountId", type = "org.hibernate.type.StringType"))
@Filter(name = "myPersonFilter")
@Indexed
public class Person implements Identifiable<String>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = LoggerFactory.getLogger(Person.class);

    // Raw attributes
    private String id; // pk
    private String username; // unique (not null)
    private String password; // not null
    private String email; // unique (not null)
    private Boolean isEnabled;
    private Civility civility;
    private String firstName;
    private String lastName;
    private Date birthDate; // not null
    private Integer version;
    private String photo;

    // Many to many
    private List<Role> securityRoles = new ArrayList<Role>();

    // -------------------------------
    // Role names support
    // -------------------------------

    /**
     * Returns the granted authorities for this user. You may override
     * this method to provide your own custom authorities.
     */
    @Transient
    @XmlTransient
    public List<String> getRoleNames() {
        List<String> roleNames = new ArrayList<String>();

        for (Role securityRole : getSecurityRoles()) {
            roleNames.add(securityRole.getRoleName());
        }

        return roleNames;
    }

    // -- [id] ------------------------

    @Override
    @Column(name = "ID", length = 32)
    @GeneratedValue(generator = "strategy-uuid")
    @GenericGenerator(name = "strategy-uuid", strategy = "uuid")
    @Id
    public String getId() {
        return id;
    }

    @Override
    public void setId(String id) {
        this.id = id;
    }

    public Person id(String id) {
        setId(id);
        return this;
    }

    @Override
    @Transient
    @XmlTransient
    public boolean isIdSet() {
        return id != null && !id.isEmpty();
    }

    // -- [username] ------------------------

    @Size(min = 4, max = 255)
    @NotEmpty
    @Column(name = "LOGIN", nullable = false, unique = true)
    @Field(analyzer = @Analyzer(definition = "custom"))
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public Person username(String username) {
        setUsername(username);
        return this;
    }

    // -- [password] ------------------------

    @Size(max = 255)
    @NotEmpty
    @Column(name = "`PASSWORD`", nullable = false)
    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Person password(String password) {
        setPassword(password);
        return this;
    }

    // -- [email] ------------------------

    @Size(max = 255)
    @NotEmpty
    @Email
    @Column(name = "EMAIL", nullable = false, unique = true)
    @Field(analyzer = @Analyzer(definition = "custom"))
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public Person email(String email) {
        setEmail(email);
        return this;
    }

    // -- [isEnabled] ------------------------

    @Column(name = "IS_ENABLED", length = 0)
    public Boolean getIsEnabled() {
        return isEnabled;
    }

    public void setIsEnabled(Boolean isEnabled) {
        this.isEnabled = isEnabled;
    }

    public Person isEnabled(Boolean isEnabled) {
        setIsEnabled(isEnabled);
        return this;
    }

    // -- [civility] ------------------------

    @Column(name = "CIVILITY", length = 5)
    @Enumerated(STRING)
    public Civility getCivility() {
        return civility;
    }

    public void setCivility(Civility civility) {
        this.civility = civility;
    }

    public Person civility(Civility civility) {
        setCivility(civility);
        return this;
    }

    // -- [firstName] ------------------------

    @Size(max = 255)
    @Column(name = "FIRST_NAME")
    @Field(analyzer = @Analyzer(definition = "custom"))
    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public Person firstName(String firstName) {
        setFirstName(firstName);
        return this;
    }

    // -- [lastName] ------------------------

    @Size(max = 255)
    @Column(name = "LAST_NAME")
    @Field(analyzer = @Analyzer(definition = "custom"))
    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public Person lastName(String lastName) {
        setLastName(lastName);
        return this;
    }

    // -- [birthDate] ------------------------

    @NotNull
    @Column(name = "BIRTH_DATE", nullable = false, length = 19)
    @Temporal(TIMESTAMP)
    public Date getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(Date birthDate) {
        this.birthDate = birthDate;
    }

    public Person birthDate(Date birthDate) {
        setBirthDate(birthDate);
        return this;
    }

    // -- [version] ------------------------

    @Column(name = "VERSION", precision = 10)
    @Version
    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public Person version(Integer version) {
        setVersion(version);
        return this;
    }

    // -- [photo] ------------------------

    @Basic(fetch = FetchType.LAZY)
    @Column(name = "PHOTO")
    @Lob
    public String getPhoto() {
        return photo;
    }

    public void setPhoto(String photo) {
        this.photo = photo;
    }

    public Person photo(String photo) {
        setPhoto(photo);
        return this;
    }

    // -----------------------------------------------------------------
    // Many to Many
    // -----------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
    // many-to-many: person ==> securityRoles
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

    /**
     * Returns the {@link #securityRoles} list.
     */
    @JoinTable(name = "person_role", joinColumns = @JoinColumn(name = "PERSON_ID"), inverseJoinColumns = @JoinColumn(name = "ROLE_ID"))
    @ManyToMany(cascade = { PERSIST, MERGE },fetch=FetchType.EAGER)
    public List<Role> getSecurityRoles() {
        return securityRoles;
    }

    /**
     * Set the {@link #securityRoles} list.
     * <p>
     * It is recommended to use the helper method {@link #addSecurityRole(Role)} / {@link #removeSecurityRole(Role)}
     * if you want to preserve referential integrity at the object level.
     *
     * @param securityRoles the list of Role
     */
    public void setSecurityRoles(List<Role> securityRoles) {
        this.securityRoles = securityRoles;
    }

    /**
     * Helper method to add the passed {@link Role} to the {@link #securityRoles} list.
     */
    public boolean addSecurityRole(Role securityRole) {
        return getSecurityRoles().add(securityRole);
    }

    /**
     * Helper method to remove the passed {@link Role} from the {@link #securityRoles} list.
     */
    public boolean removeSecurityRole(Role securityRole) {
        return getSecurityRoles().remove(securityRole);
    }

    /**
     * Helper method to determine if the passed {@link Role} is present in the {@link #securityRoles} list.
     */
    public boolean containsSecurityRole(Role securityRole) {
        return getSecurityRoles() != null && getSecurityRoles().contains(securityRole);
    }

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Person && hashCode() == other.hashCode());
    }

    private volatile int previousHashCode = 0;

    @Override
    public int hashCode() {
        int hashCode = Objects.hashCode(getEmail());
        if (previousHashCode != 0 && previousHashCode != hashCode) {
            log.warn("DEVELOPER: hashCode has changed!." //
                    + "If you encounter this message you should take the time to carefuly review equals/hashCode for: " //
                    + getClass().getCanonicalName());
        }

        previousHashCode = hashCode;
        return hashCode;
    }

    /**
     * Construct a readable string representation for this Person instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add(Person_.id.getName(), getId()) //
                .add(Person_.username.getName(), getUsername()) //
                .add(Person_.password.getName(), getPassword()) //
                .add(Person_.email.getName(), getEmail()) //
                .add(Person_.isEnabled.getName(), getIsEnabled()) //
                .add(Person_.civility.getName(), getCivility()) //
                .add(Person_.firstName.getName(), getFirstName()) //
                .add(Person_.lastName.getName(), getLastName()) //
                .add(Person_.birthDate.getName(), getBirthDate()) //
                .add(Person_.version.getName(), getVersion()) //
                .add(Person_.photo.getName(), getPhoto()) //
                .toString();
    }
}
/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/test/java/dao/DaoIT.e.vm.java
 */
package com.app.demo.dao;

import java.util.List;
import java.util.Set;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static com.google.common.collect.Sets.newHashSet;
import static org.fest.assertions.Assertions.assertThat;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

import com.app.demo.domain.Person;
import com.app.demo.repository.PersonGenerator;
import com.app.demo.dao.PersonDao;
import com.app.demo.dao.support.SearchParameters;

/**
 * Integration test on PersonDao
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath*:spring/applicationContext-test.xml" })
@Transactional
public class PersonDaoIT {
    @SuppressWarnings("unused")
    private static final Logger log = LoggerFactory.getLogger(PersonDaoIT.class);

    @PersistenceContext
    private EntityManager entityManager;

    @Inject
    private PersonDao personDao;

    @Inject
    private PersonGenerator personGenerator;

    @Test
    @Rollback
    public void saveAndGet() {
        Person person = personGenerator.getPerson();

        // add it to a Set before saving (force equals/hashcode)
        Set<Person> set = newHashSet(person, person);
        assertThat(set).hasSize(1);

        personDao.save(person);
        entityManager.flush();

        // reload it from cache and check equality
        Person model = new Person();
        model.setId(person.getId());
        assertThat(person).isEqualTo(personDao.get(model));

        // clear cache to force reload from db
        entityManager.clear();

        // since you use a business key, equality must be preserved.
        assertThat(person).isEqualTo(personDao.get(model));
    }
    
    @Test
    public void mytest() {
    	System.out.println("mytest...");
    	Person p = new Person();
    	p.setFirstName("k");
        SearchParameters sp = new SearchParameters();
        sp.anywhere();
  

        List<Person> result = personDao.find(p,sp);
        for (Person person : result) {
			System.out.println(person.toString());
			System.out.println(person.getRoleNames());
		}
   }
}